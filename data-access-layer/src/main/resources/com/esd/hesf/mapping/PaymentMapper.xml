<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.esd.hesf.dao.PaymentDao">

	<resultMap id="ResultPayment" type="com.esd.hesf.model.Payment">
		<id column="pay_id" property="id" jdbcType="INTEGER" />
		<result column="pay_create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="pay_update_time" property="updateTime" jdbcType="TIMESTAMP" />
		<result column="pay_user_id" property="userId" jdbcType="INTEGER" />
		<result column="pay_is_active" jdbcType="BIT" property="isActive" />
		<result column="pay_year" jdbcType="CHAR" property="year" />
		<result column="pay_payment_date" property="paymentDate" jdbcType="TIMESTAMP" />
		<result column="pay_payment_money" property="paymentMoney" jdbcType="DECIMAL" />
		<result column="pay_payment_bill" property="paymentBill" jdbcType="VARCHAR" />
		<result column="pay_bill_print_date" property="billPrintDate" jdbcType="TIMESTAMP" />
		<result column="pay_bill_exchange_date" property="billExchangeDate" jdbcType="TIMESTAMP" />
		<result column="pay_bill_return" jdbcType="BIT" property="billReturn" />
		<result column="pay_bill_finance" jdbcType="BIT" property="billFinance" />
		<result column="pay_bill_obsolete" property="billObsolete" jdbcType="BIT" />
		<result column="pay_remark" property="remark" jdbcType="VARCHAR" />
		<result column="pay_version" property="version" jdbcType="INTEGER" />
		<association property="paymentPerson" javaType="com.esd.hesf.model.User" resultMap="ResultUser" />
		<association property="paymentCompany" javaType="com.esd.hesf.model.Company" resultMap="ResultCompany" />
		<association property="paymentType" javaType="com.esd.hesf.model.PaymentType" resultMap="ResultPaymentType" />
		<association property="paymentExceptional" javaType="com.esd.hesf.model.PaymentExceptional" resultMap="ResultPaymentExceptional" />
		<association property="accounts" javaType="com.esd.hesf.model.Accounts" resultMap="ResultAccounts" />
	</resultMap>

	<resultMap id="ResultUser" type="com.esd.hesf.model.User">
		<id column="u_id" property="id" jdbcType="INTEGER" />
		<result column="u_user_name" property="userName" jdbcType="VARCHAR" />
		<result column="u_user_real_name" property="userRealName" jdbcType="VARCHAR" />
		<result column="u_user_password" property="userPassword" jdbcType="VARCHAR" />
		<result column="u_user_email" property="userEmail" jdbcType="VARCHAR" />
		<result column="u_user_mobile" property="userMobile" jdbcType="VARCHAR" />
		<result column="u_user_phone" property="userPhone" jdbcType="VARCHAR" />
		<result column="u_user_status" property="userStatus" jdbcType="BIT" />
	</resultMap>

	<resultMap id="ResultCompany" type="com.esd.hesf.model.Company">
		<id column="c_id" jdbcType="INTEGER" property="id" />
		<result column="c_company_code" jdbcType="VARCHAR" property="companyCode" />
		<result column="c_company_name" jdbcType="VARCHAR" property="companyName" />
		<result column="c_company_legal" jdbcType="VARCHAR" property="companyLegal" />
		<result column="c_company_contact_person" jdbcType="VARCHAR" property="companyContactPerson" />
		<result column="c_company_organization_code" jdbcType="VARCHAR" property="companyOrganizationCode" />
		<result column="c_company_tax_code" jdbcType="VARCHAR" property="companyTaxCode" />
		<result column="c_company_address" jdbcType="VARCHAR" property="companyAddress" />
		<result column="c_company_zip_code" jdbcType="CHAR" property="companyZipCode" />
		<result column="c_company_phone" jdbcType="VARCHAR" property="companyPhone" />
		<result column="c_company_mobile" jdbcType="VARCHAR" property="companyMobile" />
		<result column="c_company_bank" jdbcType="VARCHAR" property="companyBank" />
		<result column="c_company_bank_account" jdbcType="VARCHAR" property="companyBankAccount" />
		<result column="c_company_remark" jdbcType="VARCHAR" property="companyRemark" />
		<result column="c_create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="c_update_time" jdbcType="TIMESTAMP" property="updateTime" />
		<result column="c_user_id" jdbcType="INTEGER" property="userId" />
		<result column="c_is_active" jdbcType="BIT" property="isActive" />
		<result column="c_version" jdbcType="INTEGER" property="version" />
	</resultMap>

	<resultMap id="ResultPaymentType" type="com.esd.hesf.model.PaymentType">
		<id column="pt_id" property="id" jdbcType="INTEGER" />
		<result column="pt_text" property="text" jdbcType="VARCHAR" />
	</resultMap>

	<resultMap id="ResultPaymentExceptional" type="com.esd.hesf.model.PaymentExceptional">
		<id column="pe_id" property="id" jdbcType="INTEGER" />
		<result column="pe_payment_exceptional" property="paymentExceptional" jdbcType="VARCHAR" />
		<result column="pe_value" jdbcType="VARCHAR" property="value" />
	</resultMap>

	<resultMap id="ResultAccounts" type="com.esd.hesf.model.Accounts">
		<id column="ac_id" property="id" jdbcType="INTEGER" />
		<result column="ac_create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="ac_update_time" property="updateTime" jdbcType="TIMESTAMP" />
		<result column="ac_user_id" property="userId" jdbcType="INTEGER" />
		<result column="ac_is_active" property="isActive" jdbcType="BIT" />
		<result column="ac_version" property="version" jdbcType="INTEGER" />
		<result column="ac_year" property="year" jdbcType="TIMESTAMP" />
		<result column="ac_total_money" property="totalMoney" jdbcType="DECIMAL" />
		<result column="ac_is_finished" property="isFinished" jdbcType="BIT" />
	</resultMap>

	<sql id="Base_Column_List">
		<!-- payment -->
		pay.id as pay_id, pay.create_time as pay_create_time, pay.update_time as pay_update_time,pay.user_id as pay_user_id, pay.is_active as pay_is_active,
		pay.year as pay_year, 
		pay.payment_date as pay_payment_date, pay.payment_money as pay_payment_money, pay.payment_bill as pay_payment_bill, pay.bill_print_date as pay_bill_print_date,
		pay.bill_exchange_date as pay_bill_exchange_date, pay.bill_return as pay_bill_return, pay.bill_finance as pay_bill_finance,
		pay.bill_obsolete as pay_bill_obsolete, pay.remark as pay_remark, pay.version as pay_version, 
		<!-- user -->
		u.id as u_id, u.user_name as u_user_name, u.user_real_name as u_user_real_name, u.user_password as u_user_password, u.user_email as u_user_email, u.user_mobile as u_user_mobile, u.user_phone as u_user_phone, u.user_status as u_user_status, 
		<!-- company -->
		c.id as c_id, c.company_code as c_company_code, c.company_name as c_company_name, c.company_legal as c_company_legal, c.company_contact_person as c_company_contact_person, c.company_organization_code as c_company_organization_code, c.company_tax_code as c_company_tax_code, c.company_address as c_company_address, c.company_zip_code as c_company_zip_code, c.company_phone as c_company_phone, c.company_mobile as c_company_mobile, c.company_bank as c_company_bank, c.company_bank_account as c_company_bank_account, c.company_remark as c_company_remark, c.create_time as c_create_time, c.update_time as c_update_time, c.user_id as c_user_id, c.is_active as c_is_active, c.version as c_version, 
		<!-- payment type -->
		pt.id as pt_id, pt.text as pt_text, 
		<!-- payment exceptional -->
		pe.id as pe_id, pe.payment_exceptional as pe_payment_exceptional, pe.value as pe_value,
		<!-- accounts -->
		ac.id as ac_id, ac.create_time as ac_create_time, ac.update_time as ac_update_time,ac.user_id as ac_user_id, ac.is_active as ac_is_active, ac.version as ac_version,
		ac.year as ac_year, ac.total_money as ac_total_money,
		ac.is_finished as ac_is_finished
	</sql>

	<sql id="From_Column">
		payment as pay left join user as u on (pay.payment_person = u.id ) 
		left join company as c on (pay.payment_company = c.id ) 
		left join payment_type as pt on (pay.payment_type = pt.id)
		left join payment_exceptional as pe on (pay.payment_exceptional = pe.id)
		left join accounts as ac on (pay.accounts_id = ac.id)
	</sql>

	<!-- insert -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.esd.hesf.model.Payment">
		<selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into payment (create_time, update_time, user_id, is_active, year, payment_date, payment_money,
		payment_person,payment_company, payment_bill, payment_type, payment_exceptional, bill_print_date,
		bill_exchange_date, bill_return, bill_finance, bill_obsolete, remark, accounts_id, version)
		values
		(now(),now(), #{userId,jdbcType=INTEGER}, #{isActive,jdbcType=BIT}, #{year, jdbcType=CHAR}, now(),
		#{paymentMoney,jdbcType=DECIMAL}, #{paymentPerson.id},,#{paymentCompany.id,jdbcType=VARCHAR},
		#{paymentBill,jdbcType=VARCHAR}, #{paymentType.id,jdbcType=INTEGER},
		#{paymentExceptional,jdbcType=INTEGER},
		#{billPrintDate,jdbcType=TIMESTAMP},#{billExchangeDate,jdbcType=TIMESTAMP},#{billReturn,jdbcType=BIT},
		#{billFinance,jdbcType=BIT},#{billObsolete,jdbcType=BIT}, #{remark,jdbcType=VARCHAR},
		#{accounts.id,jdbcType=INTEGER}, #{version,jdbcType=INTEGER})
	</insert>

	<insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.esd.hesf.model.Payment">
		<selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into payment
		<trim prefix="(" suffix=")" suffixOverrides=",">
			create_time,
			update_time,
			<if test="userId != null">
				user_id,
			</if>
			<if test="isActive != null">
				is_active,
			</if>
			<if test="year != null">
				year,
			</if>
			payment_date,
			<if test="paymentMoney != null">
				payment_money,
			</if>
			<if test="paymentPerson != null">
				<if test="paymentPerson.id != null and paymentPerson.id > 0">
					payment_person,
				</if>
			</if>
			<if test="paymentCompany != null">
				<if test="paymentCompany.id != null and paymentCompany.id != ''">
					payment_company,
				</if>
			</if>
			<if test="paymentBill != null and paymentBill != ''">
				payment_bill,
			</if>
			<if test="paymentType != null">
				<if test="paymentType.id != null and paymentType.id > 0">
					payment_type,
				</if>
			</if>
			<if test="paymentExceptional != null">
				<if test="paymentExceptional.id != null and paymentExceptional.id > 0">
					payment_exceptional,
				</if>
			</if>
			<if test="billPrintDate != null">
				bill_print_date,
			</if>
			<if test="billExchangeDate != null">
				bill_exchange_date,
			</if>
			<if test="billReturn != null">
				bill_return,
			</if>
			<if test="billFinance != null">
				bill_finance,
			</if>
			<if test="billObsolete != null">
				bill_obsolete,
			</if>
			<if test="remark != null">
				remark,
			</if>
			<if test="accounts != null">
				<if test="accounts.id != null and accounts.id > 0">
					accounts_id,
				</if>
			</if>
			version
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			now(),now(),
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="isActive != null">
				#{isActive,jdbcType=BIT},
			</if>
			<if test="year != null">
				#{year,jdbcType=CHAR},
			</if>
			now(),
			<if test="paymentMoney != null">
				#{paymentMoney,jdbcType=DECIMAL},
			</if>
			<if test="paymentPerson != null">
				<if test="paymentPerson.id != null and paymentPerson.id > 0">
					#{paymentPerson.id,jdbcType=INTEGER},
				</if>
			</if>
			<if test="paymentCompany != null">
				<if test="paymentCompany.id != null and paymentCompany.id != ''">
					#{paymentCompany.id,jdbcType=VARCHAR},
				</if>
			</if>
			<if test="paymentBill != null and paymentBill != ''">
				#{paymentBill,jdbcType=VARCHAR},
			</if>
			<if test="paymentType != null">
				<if test="paymentType.id != null and paymentType.id > 0">
					#{paymentType.id, jdbcType=INTEGER},
				</if>
			</if>
			<if test="paymentExceptional != null">
				<if test="paymentExceptional.id != null and paymentExceptional.id > 0">
					#{paymentExceptional.id,jdbcType=INTEGER},
				</if>
			</if>
			<if test="billPrintDate != null">
				#{billPrintDate,jdbcType=TIMESTAMP},
			</if>
			<if test="billExchangeDate != null">
				#{billExchangeDate,jdbcType=TIMESTAMP},
			</if>
			<if test="billReturn != null">
				#{billReturn,jdbcType=BIT},
			</if>
			<if test="billFinance != null">
				#{billFinance,jdbcType=BIT},
			</if>
			<if test="billObsolete != null">
				#{billObsolete,jdbcType=BIT},
			</if>
			<if test="remark != null">
				#{remark,jdbcType=VARCHAR},
			</if>
			<if test="accounts != null">
				<if test="accounts.id != null and accounts.id > 0">
					#{accounts.id,jdbcType=INTEGER},
				</if>
			</if>
			default
		</trim>
	</insert>

	<!-- delete -->
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		payment
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<!-- update -->
	<update id="updateByPrimaryKey" parameterType="com.esd.hesf.model.Payment">
		update payment
		<set>
			update_time = now(),
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="isActive != null">
				is_active = #{isActive,jdbcType=BIT},
			</if>
			<if test="year != null">
				year = #{year,jdbcType=CHAR},
			</if>
			<if test="paymentDate != null">
				payment_date = #{paymentDate,jdbcType=TIMESTAMP},
			</if>
			<if test="paymentMoney != null">
				payment_money = #{paymentMoney,jdbcType=DECIMAL},
			</if>
			<if test="paymentPerson != null">
				<if test="paymentPerson.id != null and paymentPerson.id > 0">
					payment_person = #{paymentPerson.id,jdbcType=INTEGER},
				</if>
			</if>
			<if test="paymentCompany != null">
				<if test="paymentCompany.id != null and paymentCompany.id != ''">
					payment_company = #{paymentCompany.id,jdbcType=VARCHAR},
				</if>
			</if>
			<if test="paymentBill != null and paymentBill != ''">
				payment_bill = #{paymentBill,jdbcType=VARCHAR},
			</if>
			<if test="paymentType != null">
				<if test="paymentType.id != null and paymentType.id > 0">
					payment_type = #{paymentType.id,jdbcType=VARCHAR},
				</if>
			</if>
			<if test="paymentExceptional != null">
				<if test="paymentExceptional.id != null and paymentExceptional.id > 0">
					payment_exceptional = #{paymentExceptional.id,jdbcType=INTEGER},
				</if>
			</if>
			<if test="billPrintDate != null">
				bill_print_date = #{billPrintDate,jdbcType=TIMESTAMP},
			</if>
			<if test="billExchangeDate != null">
				bill_exchange_date = #{billExchangeDate,jdbcType=TIMESTAMP},
			</if>
			<if test="billReturn != null">
				bill_return = #{billReturn,jdbcType=BIT},
			</if>
			<if test="billFinance != null">
				bill_finance = #{billFinance,jdbcType=BIT},
			</if>
			<if test="billObsolete != null">
				bill_obsolete = #{billObsolete,jdbcType=BIT},
			</if>
			<if test="remark != null">
				remark = #{remark,jdbcType=VARCHAR},
			</if>
			<if test="accounts != null">
				<if test="accounts.id != null and accounts.id > 0">
					accounts_id = #{accounts.id,jdbcType=INTEGER},
				</if>
			</if>
			version = version + 1
		</set>
		where id = #{id,jdbcType=INTEGER} and version = #{version,jdbcType=INTEGER}
	</update>

	<!-- retrieve -->
	<select id="retrieveByPrimaryKey" resultMap="ResultPayment" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from
		<include refid="From_Column" />
		where pay.id = #{id,jdbcType=INTEGER}
		order by pay.id
	</select>

	<select id="retrieveByPage" resultMap="ResultPayment" parameterType="map">
		select
		<include refid="Base_Column_List" />
		from
		<include refid="From_Column" />
		<trim prefix="where" prefixOverrides="and|or">
			<if test="payment != null">
				<if test="payment.userId != null and payment.userId > 0">
					pay.user_id = #{payment.userId,jdbcType=INTEGER}
				</if>
				<choose>
					<when test="payment.isActive != null">
						and pay.is_active = #{payment.isActive}
					</when>
					<otherwise>
						and pay.is_active = 0 
					</otherwise>
				</choose>
				<if test="payment.year != null and payment.year != ''">
					and pay.year = #{payment.year, jdbcType=CHAR} 
				</if>
				<if test="payment.paymentDate != null">
					and pay.payment_date = #{payment.paymentDate,jdbcType=TIMESTAMP}
				</if>
				<if test="payment.paymentMoney != null and payment.paymentMoney >= 0">
					and pay.payment_money = #{payment.paymentMoney,jdbcType=DECIMAL}
				</if>
				<!-- paymentPerson -->
				<if test="payment.paymentPerson != null">
					<if test="payment.paymentPerson.id != null and payment.paymentPerson.id > 0">
						and pay.payment_person = #{payment.paymentPerson.id,jdbcType=INTEGER}
					</if>
				</if>
				<!-- paymentCompany -->
				<if test="payment.paymentCompany != null">
					<if test="payment.paymentCompany.id != null and payment.paymentCompany.id != ''">
						and pay.payment_company = #{payment.paymentCompany.id,jdbcType=INTEGER}
					</if>
					<if test="payment.paymentCompany.companyCode != null and payment.paymentCompany.companyCode != ''">
						and c.company_code like concat('%',#{payment.paymentCompany.companyCode, jdbcType=VARCHAR},'%')
					</if>
					<if test="payment.paymentCompany.companyName != null and payment.paymentCompany.companyName != ''">
						and c.company_name like concat('%',#{payment.paymentCompany.companyName, jdbcType=VARCHAR},'%') 
					</if>
					<if test="payment.paymentCompany.companyOrganizationCode != null and payment.paymentCompany.companyOrganizationCode != ''">
						and c.company_organization_code like concat('%',#{payment.paymentCompany.companyOrganizationCode, jdbcType=VARCHAR},'%')  
					</if>
					<if test="payment.paymentCompany.companyTaxCode != null and payment.paymentCompany.companyTaxCode != ''">
						and c.company_tax_code like concat('%',#{payment.paymentCompany.companyTaxCode, jdbcType=VARCHAR},'%') 
					</if>
					<if test="payment.paymentCompany.companyZipCode != null and payment.paymentCompany.companyZipCode != ''">
						and c.company_zip_code like concat('%',#{payment.paymentCompany.companyZipCode, jdbcType=VARCHAR},'%')  
					</if>
					<if test="payment.paymentCompany.companyType != null">
						<if test="payment.paymentCompany.companyType.id != null and payment.paymentCompany.companyType.id > 0">
							and c.company_type = #{payment.paymentCompany.companyType.id, jdbcType=INTEGER} 
						</if>
					</if>
					<if test="payment.paymentCompany.companyEconomyType != null">
						<if test="payment.paymentCompany.companyEconomyType.id != null and payment.paymentCompany.companyEconomyType.id > 0">
							and c.company_economy_type = #{payment.paymentCompany.companyEconomyType.id, jdbcType=INTEGER} 
						</if>
					</if>
					<if test="payment.paymentCompany.companyProperty != null">
						<if test="payment.paymentCompany.companyProperty.id != null and payment.paymentCompany.companyProperty.id > 0">
							and c.company_property = #{payment.paymentCompany.companyProperty.id, jdbcType=INTEGER} 
						</if>
					</if>
					<if test="payment.paymentCompany.area != null">
						<if test="payment.paymentCompany.area.code != null and payment.paymentCompany.area.code != '' ">
							and c.area_code = #{payment.paymentCompany.area.code, jdbcType=CHAR} 
						</if>
					</if>
				</if>
				<if test="payment.paymentBill != null and payment.paymentBill != ''">
					and pay.payment_bill like concat('%',#{payment.paymentBill,jdbcType=VARCHAR},'%')
				</if>
				<!-- paymentType -->
				<if test="payment.paymentType != null">
					<if test="payment.paymentType.id != null and payment.paymentType.id > 0">
						and pay.payment_type = #{payment.paymentType.id,jdbcType=INTEGER} 
					</if>
				</if>
				<if test="payment.billPrintDate != null">
					and pay.bill_print_date = #{payment.billPrintDate,jdbcType=TIMESTAMP}
				</if>
				<if test="payment.billExchangeDate != null">
					and pay.bill_exchange_date = #{payment.billExchangeDate,jdbcType=TIMESTAMP}
				</if>
				<if test="payment.billReturn != null">
					and pay.bill_return = #{payment.billReturn, jdbcType=BIT} 
				</if>
				<if test="payment.billFinance != null">
					and pay.bill_finance = #{payment.billFinance,jdbcType=BIT} 
				</if>
				<if test="payment.billObsolete != null">
					and pay.bill_obsolete = #{payment.billObsolete,jdbcType=BIT} 
				</if>
				<!-- paymentExceptional -->
				<if test="payment.paymentExceptional != null">
					<if test="payment.paymentExceptional.id != null and payment.paymentExceptional.id > 0">
						and pay.payment_exceptional = #{payment.paymentExceptional.id,jdbcType=INTEGER} 
					</if>
				</if>
				<!-- accounts -->
				<if test="payment.accounts != null">
					<if test="payment.accounts.id != null and payment.accounts.id > 0">
						and pay.accounts_id = #{payment.accounts.id,jdbcType=INTEGER}
					</if>
					<if test="payment.accounts.year != null and payment.accounts.year != ''">
						and ac.year = #{payment.accounts.year,jdbcType=CHAR} 
					</if>
				</if>
				<choose>
					<when test="payment.isActive != null">
						and pay.is_active = #{payment.isActive,jdbcType=BIT}
					</when>
					<otherwise>
						and pay.is_active = 0
					</otherwise>
				</choose>
			</if>
			<!-- 缴款时间范围 -->
			<if test="startDate != null and startDate != ''">
				and substring(pay.payment_date,1,10) &gt;=  #{startDate}
			</if>
			<if test="endDate != null and endDate != ''">
				and substring(pay.payment_date,1,10) &lt;= #{endDate}
			</if>
		</trim>
		order by c.company_code
		limit #{start}, #{size}
	</select>

	<select id="retrieveCount" resultType="int" parameterType="map">
		select count(*) 
		from
		<include refid="From_Column" />
		<trim prefix="where" prefixOverrides="and|or">
			<if test="payment != null">
				<if test="payment.userId != null and payment.userId > 0">
					pay.user_id = #{payment.userId,jdbcType=INTEGER}
				</if>
				<choose>
					<when test="payment.isActive != null">
						and pay.is_active = #{payment.isActive}
					</when>
					<otherwise>
						and pay.is_active = 0 
					</otherwise>
				</choose>
				<if test="payment.year != null and payment.year != ''">
					and pay.year = #{payment.year, jdbcType=CHAR} 
				</if>
				<if test="payment.paymentDate != null">
					and pay.payment_date = #{payment.paymentDate,jdbcType=TIMESTAMP}
				</if>
				<if test="payment.paymentMoney != null and payment.paymentMoney >= 0">
					and pay.payment_money = #{payment.paymentMoney,jdbcType=DECIMAL}
				</if>
				<!-- paymentPerson -->
				<if test="payment.paymentPerson != null">
					<if test="payment.paymentPerson.id != null and payment.paymentPerson.id > 0">
						and pay.payment_person = #{payment.paymentPerson.id,jdbcType=INTEGER}
					</if>
				</if>
				<!-- paymentCompany -->
				<if test="payment.paymentCompany != null">
					<if test="payment.paymentCompany.id != null and payment.paymentCompany.id != ''">
						and pay.payment_company = #{payment.paymentCompany.id,jdbcType=INTEGER}
					</if>
					<if test="payment.paymentCompany.companyCode != null and payment.paymentCompany.companyCode != ''">
						and c.company_code like concat('%',#{payment.paymentCompany.companyCode, jdbcType=VARCHAR},'%')
					</if>
					<if test="payment.paymentCompany.companyName != null and payment.paymentCompany.companyName != ''">
						and c.company_name like concat('%',#{payment.paymentCompany.companyName, jdbcType=VARCHAR},'%') 
					</if>
					<if test="payment.paymentCompany.companyOrganizationCode != null and payment.paymentCompany.companyOrganizationCode != ''">
						and c.company_organization_code like concat('%',#{payment.paymentCompany.companyOrganizationCode, jdbcType=VARCHAR},'%')  
					</if>
					<if test="payment.paymentCompany.companyTaxCode != null and payment.paymentCompany.companyTaxCode != ''">
						and c.company_tax_code like concat('%',#{payment.paymentCompany.companyTaxCode, jdbcType=VARCHAR},'%') 
					</if>
					<if test="payment.paymentCompany.companyZipCode != null and payment.paymentCompany.companyZipCode != ''">
						and c.company_zip_code like concat('%',#{payment.paymentCompany.companyZipCode, jdbcType=VARCHAR},'%')  
					</if>
					<if test="payment.paymentCompany.companyType != null">
						<if test="payment.paymentCompany.companyType.id != null and payment.paymentCompany.companyType.id > 0">
							and c.company_type = #{payment.paymentCompany.companyType.id, jdbcType=INTEGER} 
						</if>
					</if>
					<if test="payment.paymentCompany.companyEconomyType != null">
						<if test="payment.paymentCompany.companyEconomyType.id != null and payment.paymentCompany.companyEconomyType.id > 0">
							and c.company_economy_type = #{payment.paymentCompany.companyEconomyType.id, jdbcType=INTEGER} 
						</if>
					</if>
					<if test="payment.paymentCompany.companyProperty != null">
						<if test="payment.paymentCompany.companyProperty.id != null and payment.paymentCompany.companyProperty.id > 0">
							and c.company_property = #{payment.paymentCompany.companyProperty.id, jdbcType=INTEGER} 
						</if>
					</if>
					<if test="payment.paymentCompany.area != null">
						<if test="payment.paymentCompany.area.code != null and payment.paymentCompany.area.code != '' ">
							and c.area_code = #{payment.paymentCompany.area.code, jdbcType=CHAR} 
						</if>
					</if>
				</if>
				<if test="payment.paymentBill != null and payment.paymentBill != ''">
					and pay.payment_bill like concat('%',#{payment.paymentBill,jdbcType=VARCHAR},'%')
				</if>
				<!-- paymentType -->
				<if test="payment.paymentType != null">
					<if test="payment.paymentType.id != null and payment.paymentType.id > 0">
						and pay.payment_type = #{payment.paymentType.id,jdbcType=INTEGER} 
					</if>
				</if>
				<if test="payment.billPrintDate != null">
					and pay.bill_print_date = #{payment.billPrintDate,jdbcType=TIMESTAMP}
				</if>
				<if test="payment.billExchangeDate != null">
					and pay.bill_exchange_date = #{payment.billExchangeDate,jdbcType=TIMESTAMP}
				</if>
				<if test="payment.billReturn != null">
					and pay.bill_return = #{payment.billReturn, jdbcType=BIT} 
				</if>
				<if test="payment.billFinance != null">
					and pay.bill_finance = #{payment.billFinance,jdbcType=BIT} 
				</if>
				<if test="payment.billObsolete != null">
					and pay.bill_obsolete = #{payment.billObsolete,jdbcType=BIT} 
				</if>
				<!-- paymentExceptional -->
				<if test="payment.paymentExceptional != null">
					<if test="payment.paymentExceptional.id != null and payment.paymentExceptional.id > 0">
						and pay.payment_exceptional = #{payment.paymentExceptional.id,jdbcType=INTEGER} 
					</if>
				</if>
				<!-- accounts -->
				<if test="payment.accounts != null">
					<if test="payment.accounts.id != null and payment.accounts.id > 0">
						and pay.accounts_id = #{payment.accounts.id,jdbcType=INTEGER}
					</if>
					<if test="payment.accounts.year != null and payment.accounts.year != ''">
						and ac.year = #{payment.accounts.year,jdbcType=CHAR} 
					</if>
				</if>
				<choose>
					<when test="payment.isActive != null">
						and pay.is_active = #{payment.isActive,jdbcType=BIT}
					</when>
					<otherwise>
						and pay.is_active = 0
					</otherwise>
				</choose>
			</if>
			<!-- 缴款时间范围 -->
			<if test="startDate != null and startDate != ''">
				and substring(pay.payment_date,1,10) &gt;=  #{startDate}
			</if>
			<if test="endDate != null and endDate != ''">
				and substring(pay.payment_date,1,10) &lt;= #{endDate}
			</if>
		</trim>
	</select>

	<select id="retrieveAlreadyPay" resultType="decimal" parameterType="com.esd.hesf.model.Payment">
		select sum(pay.payment_money)
		from payment as pay, company as c
		<trim prefix="where" prefixOverrides="and|or">
			pay.payment_company = c.id
			<if test="paymentCompany != null">
				<if test="paymentCompany.id != null and paymentCompany.id != ''">
					and pay.payment_company = #{paymentCompany.id, jdbcType=VARCHAR}
				</if>
				<if test="paymentCompany.companyCode != null and paymentCompany.companyCode != ''">
					and c.company_code = #{paymentCompany.companyCode, jdbcType=VARCHAR}
				</if>
			</if>
			<if test="accounts != null">
				<if test="accounts.id != null and accounts.id > 0">
					and pay.accounts_id = #{accounts.id, jdbcType=INTEGER}
				</if>
			</if>
		</trim>
	</select>

	<select id="retrieveByCompanyAndYear" resultType="decimal" parameterType="map">
		select sum(pay.payment_money)
		from company as c, payment as pay, accounts as ac 
		<where>
			c.id = pay.payment_company and pay.accounts_id = ac.id 
			<if test="companyType != null and companyType > 0">
				and c.company_type = #{companyType,jdbcType=INTEGER}
			</if>
			<if test="companyEconomyType != null and companyEconomyType > 0">
				and c.company_economy_type = #{companyEconomyType,jdbcType=INTEGER}
			</if>
			<if test="areaCode != null and areaCode != ''">
				and c.area_code = #{areaCode,jdbcType=CHAR}
			</if>
			and ac.year = #{year,jdbcType=CHAR}
		</where>
	</select>

	<select id="retrieveByFullField">
		
	
	</select>



</mapper>