<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.esd.hesf.dao.PaymentDao">

	<resultMap id="ResultPayment" type="com.esd.hesf.model.Payment">
		<id column="pay_id" property="id" jdbcType="INTEGER" />
		<result column="pay_create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="pay_update_time" property="updateTime" jdbcType="TIMESTAMP" />
		<result column="pay_user_id" property="userId" jdbcType="INTEGER" />
		<result column="pay_is_active" property="isActive" jdbcType="BIT" />
		<result column="pay_payment_date" property="paymentDate" jdbcType="TIMESTAMP" />
		<result column="pay_payment_money" property="paymentMoney" jdbcType="DECIMAL" />
		<result column="pay_payment_bill" property="paymentBill" jdbcType="VARCHAR" />
		<result column="pay_remark" property="remark" jdbcType="VARCHAR" />
		<result column="pay_audit_id" property="auditId" jdbcType="INTEGER" />
		<result column="pay_version" property="version" jdbcType="INTEGER" />
		<association property="paymentPerson" javaType="com.esd.hesf.model.User" resultMap="ResultUser" />
		<association property="paymentCompany" javaType="com.esd.hesf.model.Company" resultMap="ResultCompany" />
		<association property="paymentType" javaType="com.esd.hesf.model.PaymentType" resultMap="ResultPaymentType" />
	</resultMap>

	<resultMap id="ResultUser" type="com.esd.hesf.model.User">
		<id column="u_id" property="id" jdbcType="INTEGER" />
		<result column="u_user_name" property="userName" jdbcType="VARCHAR" />
		<result column="u_user_real_name" property="userRealName" jdbcType="VARCHAR" />
		<result column="u_user_password" property="userPassword" jdbcType="VARCHAR" />
		<result column="u_user_email" property="userEmail" jdbcType="VARCHAR" />
		<result column="u_user_mobile" property="userMobile" jdbcType="VARCHAR" />
		<result column="u_user_phone" property="userPhone" jdbcType="VARCHAR" />
		<result column="u_user_status" property="userStatus" jdbcType="BIT" />
	</resultMap>

	<resultMap id="ResultCompany" type="com.esd.hesf.model.Company">
		<id column="c_year" jdbcType="CHAR" property="year" />
		<id column="c_company_code" jdbcType="VARCHAR" property="companyCode" />
		<result column="c_id" jdbcType="VARCHAR" property="id" />
		<result column="c_company_name" jdbcType="VARCHAR" property="companyName" />
		<result column="c_company_legal" jdbcType="VARCHAR" property="companyLegal" />
		<result column="c_company_contact_person" jdbcType="VARCHAR" property="companyContactPerson" />
		<result column="c_company_organization_code" jdbcType="VARCHAR"
			property="companyOrganizationCode" />
		<result column="c_company_tax_code" jdbcType="VARCHAR" property="companyTaxCode" />
		<result column="c_company_address" jdbcType="VARCHAR" property="companyAddress" />
		<result column="c_company_zip_code" jdbcType="CHAR" property="companyZipCode" />
		<result column="c_company_phone" jdbcType="VARCHAR" property="companyPhone" />
		<result column="c_company_mobile" jdbcType="VARCHAR" property="companyMobile" />
		<result column="c_company_bank" jdbcType="VARCHAR" property="companyBank" />
		<result column="c_company_bank_account" jdbcType="VARCHAR" property="companyBankAccount" />
		<result column="c_company_remark" jdbcType="VARCHAR" property="companyRemark" />
		<result column="c_create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="c_update_time" jdbcType="TIMESTAMP" property="updateTime" />
		<result column="c_user_id" jdbcType="INTEGER" property="userId" />
		<result column="c_is_active" jdbcType="BIT" property="isActive" />
		<result column="c_version" jdbcType="INTEGER" property="version" />
	</resultMap>
	
	<resultMap id="ResultPaymentType" type="com.esd.hesf.model.PaymentType">
		<id column="pt_id" property="id" jdbcType="INTEGER" />
		<result column="pt_text" property="text" jdbcType="VARCHAR" />
	</resultMap>
	
	<sql id="Base_Column_List">
		<!-- payment -->
		pay.id as pay_id, pay.create_time as pay_create_time,
		pay.update_time as pay_update_time,pay.user_id as pay_user_id,
		pay.is_active as pay_is_active,pay.payment_date as pay_payment_date,
		pay.payment_money as pay_payment_money, pay.payment_bill as pay_payment_bill, 
		pay.payment_type as pay_payment_type, pay.remark as pay_remark,
		pay.audit_id as pay_audit_id,pay.version as pay_version,
		<!-- user -->
		u.id as u_id, u.user_name as u_user_name, u.user_real_name as u_user_real_name,
		u.user_password as u_user_password, u.user_email as u_user_email,
		u.user_mobile as u_user_mobile, u.user_phone as
		u_user_phone,
		u.user_status as u_user_status,
		<!-- company -->
		c.id as c_id, c.year as c_year, c.company_code as c_company_code, c.company_name as c_company_name, c.company_legal as c_company_legal,
		c.company_contact_person as c_company_contact_person, 
		c.company_organization_code as c_company_organization_code, c.company_tax_code as c_company_tax_code,
		c.company_address as c_company_address, c.company_zip_code as c_company_zip_code, 
		c.company_phone as c_company_phone, c.company_mobile as c_company_mobile, 
		c.company_bank as c_company_bank, c.company_bank_account as c_company_bank_account,
		c.company_remark as c_company_remark, c.create_time as c_create_time, 
		c.update_time as c_update_time, c.user_id as c_user_id, c.is_active as c_is_active, c.version as c_version,
		<!-- payment type -->
		pt.id as pt_id, pt.text as pt_text
	</sql>

	<!-- insert -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.esd.hesf.model.Payment">
		<selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into payment (create_time, update_time,
		user_id, is_active, payment_date, payment_money,
		payment_person,payment_company, payment_bill, payment_type, remark, audit_id, version)
		values
		(now(),now(),
		#{userId,jdbcType=INTEGER}, #{isActive,jdbcType=BIT},
		now(), #{paymentMoney,jdbcType=DECIMAL},
		#{paymentPerson.id},,#{paymentCompany.id,jdbcType=VARCHAR},#{paymentBill,jdbcType=VARCHAR},
		#{paymentType.id,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR},
		#{auditId,jdbcType=INTEGER},
		#{version,jdbcType=INTEGER})
	</insert>

	<insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.esd.hesf.model.Payment">
		<selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into payment
		<trim prefix="(" suffix=")" suffixOverrides=",">
			create_time,
			update_time,
			<if test="userId != null">
				user_id,
			</if>
			<if test="isActive != null">
				is_active, 
			</if>
			payment_date,
			<if test="paymentMoney != null">
				payment_money,
			</if>
			<if test="paymentPerson != null">
				<if test="paymentPerson.id != null and paymentPerson.id > 0">
					payment_person,
				</if>
			</if>
			<if test="paymentCompany != null">
				<if test="paymentCompany.id != null and paymentCompany.id != ''">
					payment_company,
				</if>
			</if>
			<if test="paymentBill != null and paymentBill != ''">
				payment_bill,
			</if>
			<if test="paymentType != null">
				<if test="paymentType.id != null and paymentType.id > 0">
					payment_type,
				</if>
			</if>
			<if test="remark != null">
				remark,
			</if>
			<if test="auditId != null">
				audit_id,
			</if>
			version
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			now(),now(),
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="isActive != null">
				#{isActive,jdbcType=BIT}, 
			</if>
			now(),
			<if test="paymentMoney != null">
				#{paymentMoney,jdbcType=DECIMAL},
			</if>
			<if test="paymentPerson != null">
				<if test="paymentPerson.id != null and paymentPerson.id > 0">
					#{paymentPerson.id,jdbcType=INTEGER},
				</if>
			</if>
			<if test="paymentCompany != null">
				<if test="paymentCompany.id != null and paymentCompany.id != ''">
					#{paymentCompany.id,jdbcType=VARCHAR},
				</if>
			</if>
			<if test="paymentBill != null and paymentBill != ''">
				#{paymentBill,jdbcType=VARCHAR}, 
			</if>
			<if test="paymentType != null">
				<if test="paymentType.id != null and paymentType.id > 0">
					#{paymentType.id, jdbcType=INTEGER}, 
				</if>
			</if>
			<if test="remark != null">
				#{remark,jdbcType=VARCHAR},
			</if>
			<if test="auditId != null">
				#{auditId,jdbcType=INTEGER},
			</if>
			default,
		</trim>
	</insert>

	<!-- delete -->
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		payment
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<!-- update -->
	<update id="updateByPrimaryKey" parameterType="com.esd.hesf.model.Payment">
		update payment
		<set>
			update_time = now(),
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="isActive != null">
				is_active = #{isActive,jdbcType=BIT},
			</if>
			<if test="paymentDate != null">
				payment_date = #{paymentDate,jdbcType=TIMESTAMP},
			</if>
			<if test="paymentMoney != null">
				payment_money = #{paymentMoney,jdbcType=DECIMAL},
			</if>
			<if test="paymentPerson != null">
				<if test="paymentPerson.id != null and paymentPerson.id > 0">
					payment_person = #{paymentPerson.id,jdbcType=INTEGER},
				</if>
			</if>
			<if test="paymentCompany != null">
				<if test="paymentCompany.id != null and paymentCompany.id != ''">
					payment_company = #{paymentCompany.id,jdbcType=VARCHAR},
				</if>
			</if>
			<if test="paymentBill != null and paymentBill != ''">
				payment_bill = #{paymentBill,jdbcType=VARCHAR}, 
			</if>
			<if test="paymentType != null">
				<if test="paymentType.id != null and paymentType.id > 0">
					payment_type = #{paymentType.id,jdbcType=VARCHAR}, 
				</if>
			</if>
			<if test="remark != null">
				remark = #{remark,jdbcType=VARCHAR},
			</if>
			<if test="auditId != null">
				audit_id = #{auditId,jdbcType=INTEGER},
			</if>
			version = version + 1,
		</set>
		where id = #{id,jdbcType=INTEGER} and version = #{version,jdbcType=INTEGER}
	</update>

	<!-- retrieve -->
	<select id="retrieveByPrimaryKey" resultMap="ResultPayment" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from payment as pay , user as u, company as c, payment_type as pt
		where pay.payment_person = u.id and pay.id = #{id,jdbcType=INTEGER} and pay.payment_company = c.id and pay.payment_type = pt.id
	</select>

	<select id="retrieveByPage" resultMap="ResultPayment" parameterType="map">
		select
		<include refid="Base_Column_List" />
		from payment as pay, user as u, company as c, payment_type as pt 
		<trim prefix="where" prefixOverrides="and|or">
			pay.payment_person = u.id and pay.payment_company = c.id and pay.payment_type = pt.id
			<if test="payment != null">
				<if test="payment.userId != null and payment.userId > 0">
					and pay.user_id = #{payment.userId,jdbcType=INTEGER}
				</if>
				<if test="payment.isActive != null">
					and pay.is_active = #{payment.isActive}
				</if>
				<if test="payment.paymentDate != null">
					and pay.payment_date = #{payment.paymentDate,jdbcType=TIMESTAMP}
				</if>
				<if test="payment.paymentMoney != null and payment.paymentMoney >= 0">
					and pay.payment_money = #{payment.paymentMoney,jdbcType=DECIMAL}
				</if>
				<if test="payment.paymentPerson != null">
					<if test="payment.paymentPerson.id != null and payment.paymentPerson.id > 0">
						and pay.payment_person = #{payment.paymentPerson,jdbcType=INITEGER}
					</if>
				</if>
				<if test="payment.paymentCompany != null">
					<if test="payment.paymentCompany.id != null and payment.paymentCompany.id != ''">
						and pay.payment_company = #{payment.paymentCompany.id,jdbcType=VARCHAR} 
					</if>
					<if test="payment.paymentCompany.year != null and payment.paymentCompany.year != ''">
						and c.year = #{payment.paymentCompany.year, jdbcType=CHAR} 
					</if>
					<if test="payment.paymentCompany.companyCode != null and payment.paymentCompany.companyCode != ''">
						and c.company_code = #{payment.paymentCompany.companyCode, jdbcType=VARCHAR} 
					</if>
				</if>
				<if test="payment.paymentBill != null and payment.paymentBill != ''">
					and pay.payment_bill like concat('%',#{payment.paymentBill,jdbcType=VARCHAR},'%')  
				</if>
				<if test="payment.paymentType != null">
					<if test="payment.paymentType.id != null and payment.paymentType.id > 0">
						and pay.payment_type like concat('%',#{payment.paymentType,jdbcType=VARCHAR},'%')  
					</if>
				</if>
				<if test="payment.auditId != null and payment.auditId > 0">
					and pay.audit_id = #{payment.auditId,jdbcType=INTEGER}
				</if>
			</if>
		</trim>
		order by pay.id  
		limit #{start}, #{size}
	</select>
	
	<select id="retrieveCount" resultType="int" parameterType="map">
		select count(*) 
		from payment as pay, user as u, company as c, payment_type as pt 
		<trim prefix="where" prefixOverrides="and|or">
			pay.payment_person = u.id and pay.payment_company = c.id and pay.payment_type = pt.id 
			<if test="payment != null">
				<if test="payment.userId != null and payment.userId > 0">
					and pay.user_id = #{payment.userId,jdbcType=INTEGER}
				</if>
				<if test="payment.isActive != null">
					and pay.is_active = #{payment.isActive}
				</if>
				<if test="payment.paymentDate != null">
					and pay.payment_date = #{payment.paymentDate,jdbcType=TIMESTAMP}
				</if>
				<if test="payment.paymentMoney != null and payment.paymentMoney >= 0">
					and pay.payment_money = #{payment.paymentMoney,jdbcType=DECIMAL}
				</if>
				<if test="payment.paymentPerson != null">
					<if test="payment.paymentPerson.id != null and payment.paymentPerson.id > 0">
						and pay.payment_person = #{payment.paymentPerson,jdbcType=INITEGER}
					</if>
				</if>
				<if test="payment.paymentCompany != null">
					<if test="payment.paymentCompany.id != null and payment.paymentCompany.id != ''">
						and pay.payment_company = #{payment.paymentCompany.id,jdbcType=VARCHAR} 
					</if>
					<if test="payment.paymentCompany.year != null and payment.paymentCompany.year != ''">
						and c.year = #{payment.paymentCompany.year, jdbcType=CHAR} 
					</if>
					<if test="payment.paymentCompany.companyCode != null and payment.paymentCompany.companyCode != ''">
						and c.company_code = #{payment.paymentCompany.companyCode, jdbcType=VARCHAR} 
					</if>
				</if>
				<if test="payment.paymentBill != null and payment.paymentBill != ''">
					and pay.payment_bill like concat('%',#{payment.paymentBill,jdbcType=VARCHAR},'%')  
				</if>
				<if test="payment.paymentType != null">
					<if test="payment.paymentType.id != null and payment.paymentType.id > 0">
						and pay.payment_type like concat('%',#{payment.paymentType,jdbcType=VARCHAR},'%')  
					</if>
				</if>
				<if test="payment.auditId != null and payment.auditId > 0">
					and pay.audit_id = #{payment.auditId,jdbcType=INTEGER}
				</if>
			</if>
		</trim>
	</select>

	<select id="retrieveAlreadyPay" resultType="decimal" parameterType="com.esd.hesf.model.Payment">
		select sum(pay.payment_money) 
		from payment as pay, company as c 
		<trim prefix="where" prefixOverrides="and|or">
			pay.payment_company = c.id 
			<if test="paymentCompany != null">
				<if test="paymentCompany.id != null and paymentCompany.id != ''">
					and pay.payment_company = #{paymentCompany.id, jdbcType=VARCHAR} 
				</if>
				<if test="paymentCompany.year != null and paymentCompany.year != ''">
					and c.year = #{paymentCompany.year, jdbcType=CHAR} 
				</if>
				<if test="paymentCompany.companyCode != null and paymentCompany.companyCode != ''">
					and c.company_code = #{paymentCompany.companyCode, jdbcType=VARCHAR} 
				</if>
			</if>
			<if test="auditId != null and auditId > 0">
				and pay.audit_id = #{auditId, jdbcType=INTEGER}
			</if>
		</trim>	
	</select>

</mapper>