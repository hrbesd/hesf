<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.esd.hesf.dao.CompanyYearWorkerDao">
	
	<resultMap id="BaseResultMap" type="com.esd.hesf.model.CompanyYearWorker">
		<id column="cyw_id" jdbcType="INTEGER" property="id" />
		<result column="cyw_year" jdbcType="CHAR" property="year" />
		<result column="cyw_worker_id" jdbcType="INTEGER" property="workerId" />
		<result column="cyw_company_id" jdbcType="VARCHAR" property="companyId" />
		<result column="cyw_current_job" jdbcType="VARCHAR" property="currentJob" />
		<result column="cyw_salary" jdbcType="DECIMAL" property="salary" />
		<result column="cyw_pension_insurance" jdbcType="DECIMAL" property="pensionInsurance" />
		<result column="cyw_create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="cyw_update_time" jdbcType="TIMESTAMP" property="updateTime" />
		<result column="cyw_is_active" jdbcType="BIT" property="isActive" />
		<result column="cyw_user_id" jdbcType="INTEGER" property="userId" />
	</resultMap>
	
	<sql id="Base_Column_List">
		cyw.id as cyw_id, cyw.year as cyw_year, cyw.worker_id as cyw_worker_id, cyw.company_id as cyw_company_id,
		cyw.current_job as cyw_current_job, 
		cyw.salary as cyw_salary, cyw.pension_insurance as cyw_pension_insurance,
		cyw.create_time as cyw_create_time, cyw.update_time as cyw_update_time,
		cyw.is_active as cyw_is_active, cyw.user_id as cyw_user_id
	</sql>
	
	<!-- insert -->
	<insert id="insert" parameterType="com.esd.hesf.model.CompanyYearWorker">
		insert into company_year_worker (year, worker_id,
		company_id, current_job, salary, pension_insurance, create_time,
		update_time, is_active, user_id )
		values (#{year,jdbcType=CHAR}, #{workerId,jdbcType=INTEGER},
		#{companyId,jdbcType=INTEGER}, #{currentJob,jdbcType=VARCHAR},
		#{salary, jdbcType=DECIMAL}, #{pensionInsurance, jdbcType=DECIMAL},
		now(),now(),default,#{userId,jdbcType=INTEGER} )
	</insert>
	
	<insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.esd.hesf.model.CompanyYearWorker">
		insert into company_year_worker
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="year != null and year != ''">
				year,
			</if>
			<if test="workerId != null">
				worker_id,
			</if>
			<if test="companyId != null">
				company_id,
			</if>
			<if test="currentJob != null">
				current_job,
			</if>
			<if test="salary != null">
				salary,
			</if>
			<if test="pensionInsurance != null">
				pension_insurance,
			</if>
			create_time, update_time, 
			<if test="isActive != null">
				is_active,
			</if>
			<if test="userId != null">
				user_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="year != null and year != ''">
				#{year,jdbcType=CHAR},
			</if>
			<if test="workerId != null">
				#{workerId,jdbcType=INTEGER},
			</if>
			<if test="companyId != null">
				#{companyId,jdbcType=INTEGER},
			</if>
			<if test="currentJob != null">
				#{currentJob,jdbcType=VARCHAR},
			</if>
			<if test="salary != null">
				#{salary, jdbcType=DECIMAL},
			</if>
			<if test="pensionInsurance != null">
				#{pensionInsurance, jdbcType=DECIMAL},
			</if>
			now(),now(),
			<if test="isActive != null">
				#{isActive,jdbcType=BIT}, 
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	
	<!-- copy last year data -->
	<insert id="insertLastYearData" parameterType="map">
		insert into company_year_worker 
			( 
			year, 
			company_id,
			worker_id,
			current_job,
			<if test="userId != null and userId > 0">
				user_id,
			</if>
			update_time
			)
		select 	#{currentYear}, 
			company_id,
			worker_id,
			current_job,
			<if test="userId != null and userId > 0">
				#{userId,jdbcType=INTEGER},
			</if>
			now()
			from 
			company_year_worker
		<where>
			year = #{lastYear} 
			<if test="companyId != null and companyId > 0">
				and company_id = #{companyId,jdbcType=INTEGER}
			</if>
		</where>
	</insert>
	
	<!-- delete -->
	<delete id="deleteByPrimaryKey" parameterType="int">
		delete from company_year_worker
		where id = #{id,jdbcType=INTEGER} 
	</delete>
	
	<delete id="deleteAllData">
		delete from company_year_worker;
	</delete>
	
	<!-- delete by self condition -->
	<delete id="deleteBySelfObject" parameterType="com.esd.hesf.model.CompanyYearWorker">
		delete from company_year_worker
		<trim prefix="where" prefixOverrides="and|or">
			<if test="year != null and year != ''">
				year = #{year,jdbcType=CHAR} 
			</if>
			<if test="companyId != null and companyId > 0">
				and company_id = #{companyId,jdbcType=INTEGER} 
			</if>
			<if test="workerId != null and workerId != ''">
				and worker_id = #{workerId,jdbcType=CHAR} 
			</if>
		</trim>
	</delete>
	
	<!-- update -->
	<update id="updateByPrimaryKey" parameterType="com.esd.hesf.model.CompanyYearWorker">
		update company_year_worker
		<set>
			<if test="workerId != null">
				worker_id = #{workerId,jdbcType=INTEGER},
			</if>
			<if test="companyId != null and companyId > 0">
				company_id = #{companyId,jdbcType=INTEGER},
			</if>
			<if test="currentJob != null">
				current_job = #{currentJob,jdbcType=VARCHAR},
			</if>
			<if test="salary != null">
				salary = #{salary, jdbcType=DECIMAL},
			</if>
			<if test="pensionInsurance != null">
				pension_insurance = #{pensionInsurance, jdbcType=DECIMAL},
			</if>
			update_time = now(),
			<if test="isActive != null">
				is_active = #{isActive,jdbcType=BIT},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER} 
	</update>

<!-- 	
	<update id="updateCompanyByWorkerAndYear" parameterType="com.esd.hesf.model.CompanyYearWorker">
		update company_year_worker
		<set>
			<if test="companyId != null and companyId > 0">
				company_id = #{companyId,jdbcType=INTEGER},
			</if>
			<if test="currentJob != null">
				current_job = #{currentJob,jdbcType=VARCHAR},
			</if>
			<if test="userId != null and userId > 0">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			update_time = now(),
		</set>
		<trim prefix="where" prefixOverrides="and|or">
			<if test="workerId != null">
				worker_id = #{workerId,jdbcType=INTEGER} 
			</if>
			<if test="year != null and year != ''">
				and year = #{year,jdbcType=CHAR}
			</if>
		</trim>
	</update> -->
	
	<!-- retrieve -->
	<select id="retrieveByPrimaryKey" parameterType="int"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from company_year_worker as cyw
		where cyw.id = #{id,jdbcType=INTEGER} 
	</select>
	
	<select id="retrieveByPage" parameterType="map"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from company_year_worker as cyw
		<trim prefix="where" prefixOverrides="and|or">
			<if test="companyYearWorker != null">
				<if test="companyYearWorker.year != null and companyYearWorker.year != ''">
					cyw.year = #{companyYearWorker.year}
				</if>
				<if test="companyYearWorker.workerId != null and companyYearWorker.workerId > 0">
					and cyw.worker_id = #{companyYearWorker.workerId}
				</if>
				<if test="companyYearWorker.companyId != null and companyYearWorker.companyId > 0 ">
					and cyw.company_id = #{companyYearWorker.companyId}
				</if>
				<choose>
					<when test="companyYearWorker.isActive != null">
						and cyw.is_active = #{companyYearWorker.isActive,jdbcType=BIT}
					</when>
					<otherwise>
						and cyw.is_active = 0
					</otherwise>
				</choose>
			</if>
		</trim>
		order by cyw.id desc
		limit #{start},#{size}		
	</select>
	
	<select id="retrieveCount" parameterType="map" resultType="int">
		select count(*) 
		from company_year_worker as cyw
		<trim prefix="where" prefixOverrides="and|or">
			<if test="companyYearWorker != null">
				<if test="companyYearWorker.year != null and companyYearWorker.year != ''">
					cyw.year = #{companyYearWorker.year}
				</if>
				<if test="companyYearWorker.workerId != null and companyYearWorker.workerId > 0">
					and cyw.worker_id = #{companyYearWorker.workerId}
				</if>
				<if test="companyYearWorker.companyId != null and companyYearWorker.companyId > 0">
					and cyw.company_id = #{companyYearWorker.companyId}
				</if>
				<choose>
					<when test="companyYearWorker.isActive != null">
						and cyw.is_active = #{companyYearWorker.isActive,jdbcType=BIT}
					</when>
					<otherwise>
						and cyw.is_active = 0
					</otherwise>
				</choose>
			</if>
		</trim>
	</select>

</mapper>