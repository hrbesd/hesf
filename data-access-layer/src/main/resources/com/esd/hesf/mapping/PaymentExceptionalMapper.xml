<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.esd.hesf.dao.PaymentExceptionalDao">

	<!-- return resultMap, usually used in join query -->
	<resultMap id="BaseResultMap" type="com.esd.hesf.model.PaymentExceptional">
		<id column="pe_id" property="id" jdbcType="INTEGER" />
		<result column="pe_payment_exceptional" property="paymentExceptional" jdbcType="VARCHAR" />
		<result column="pe_value" jdbcType="VARCHAR" property="value" />
	</resultMap>

	<sql id="Base_Column_List">
		pe.id as pe_id, pe.payment_exceptional as pe_payment_exceptional, pe.value as pe_value
	</sql>

	<!-- insert -->
	<!-- 使用数据库设定的自增id useGeneratedKeys="true" keyProperty="id" -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.esd.hesf.model.PaymentExceptional">
		<!-- 返回新保存的这条数据的id,在保存后,用保存前对象.getId()得到 -->
		<selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into payment_exceptional (payment_exceptional, value)
		values (#{paymentExceptional,jdbcType=VARCHAR},#{value,jdbcType=VARCHAR})
	</insert>

	<insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.esd.hesf.model.PaymentExceptional">
		<selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into payment_exceptional
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="paymentExceptional != null">
				payment_exceptional,
			</if>
			<if test="value != null">
				value
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="paymentExceptional != null">
				#{paymentExceptional,jdbcType=VARCHAR},
			</if>
			<if test="value != null">
				#{value,jdbcType=VARCHAR}
			</if>
		</trim>
	</insert>

	<!-- delete -->
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from payment_exceptional
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<!-- update -->
	<update id="updateByPrimaryKey" parameterType="com.esd.hesf.model.PaymentExceptional">
		update payment_exceptional
		<set>
			<if test="paymentExceptional != null">
				payment_exceptional = #{paymentExceptional,jdbcType=VARCHAR},
			</if>
			<if test="value != null">
				value = #{value,jdbcType=VARCHAR}
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!-- retrieve -->
	<select id="retrieveByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from payment_exceptional as pe
		where pe.id = #{id,jdbcType=INTEGER}
	</select>

	<select id="retrieveByPage" resultMap="BaseResultMap" parameterType="map">
		select
		<include refid="Base_Column_List" />
		from payment_exceptional as pe
		<trim prefix="where" prefixOverrides="and|or">
			<if test="paymentExceptional != null">
				<if test="paymentExceptional.paymentExceptional != null and paymentExceptional.paymentExceptional != ''">
					pe.paymentExceptional = #{paymentExceptional.paymentExceptional,jdbcType=VARCHAR}
				</if>
				<if test="paymentExceptional.value != null">
					and pe.value = #{paymentExceptional.value,jdbcType=VARCHAR}
				</if>
			</if>
		</trim>
		order by id
		limit #{start}, #{size}
	</select>

	<select id="retrieveCount" resultType="int" parameterType="map">
		select
		<include refid="Base_Column_List" />
		from payment_exceptional as pe
		<trim prefix="where" prefixOverrides="and|or">
			<if test="paymentExceptional != null">
				<if test="paymentExceptional.paymentExceptional != null and paymentExceptional.paymentExceptional != ''">
					pe.paymentExceptional = #{paymentExceptional.paymentExceptional,jdbcType=VARCHAR}
				</if>
				<if test="paymentExceptional.value != null">
					and pe.value = #{paymentExceptional.value,jdbcType=VARCHAR}
				</if>
			</if>
		</trim>
		limit #{start}, #{size}
	</select>

</mapper>